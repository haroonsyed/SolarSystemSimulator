#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Body {
  vec3 position;
  vec3 velocity;
  float mass;
}

struct TreeCell {
  Body body;
  int childIndex; // Is used to indicate lock and state of the cell
                  // -1: Unlocked/null (insert body here)
                  // -2: Locked (try again)
                  // -3: Leaf node (Insert body and the body at the cell here to children)
                  // pos #: Non-leaf node (Continue traversal)
}

readonly layout(std140, binding = 4) buffer bodiesBuffer {

  Body bodies[];

};

coherent layout(std140, binding = 5) buffer treeBuffer {

  TreeCell tree[];

};

// Assumes the bounds contain the body!
int getOffsetIndex(vec2 boundStart, vec2 boundRange, Body body) {
                  
  // Determine if we should insert into Q1,Q2,Q3,Q4 (offsets of 1,2,3,4). Corresponds to cartesian quadrants.

  vec2 center = boundStart + (boundRange/2.0);

  if(body.position.x >= center.x) { // X direction (Q1 || Q4)
    if(body.position.y >= center.y) { // Q1
      return 0;
    }
    else{ // Q4
      return 3;
    }
  }
  else{  // (Q2 || Q3)
    if(body.position.y >= center.y) { // Q2
      return 1;
    }
    else{ // Q3
      return 2;
    }
  }

}

void main() {

  uint gid = gl_GlobalInvocationID.x;
  
  // This will be the body this invocation will place in tree
  Body body = bodies[gid];
  
  bool successfullyInserted = false;
 
 // Used to track where we are while traversing the tree
  int treeIndex = 0;
  int level = 0;
  vec2 boundStart = vec2(-1e10, -1e10);
  vec2 boundRange = abs(boundStart * 2.0f);

  while(!successfullyInserted) {
    
    // Figure out where in this level we have to insert
    int offsetIndex = getOffsetIndex(boundStart, boundRange, body);
    TreeCell cell = tree[treeIndex + offsetIndex];

    if(cell.childIndex == ) {
    
    }

  }



}


