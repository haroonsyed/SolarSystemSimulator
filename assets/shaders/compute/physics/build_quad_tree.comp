#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Body {
	vec4 position;
	vec4 velocity;
	float mass;
};

struct TreeCell {
	vec4 position;
	vec4 velocity;
	float mass;
	int childIndex; // Is used to indicate lock and state of the cell
					// -1: Unlocked/null (insert body here)
					// -2: Non-leaf node
					// gid #: Lock node
};

readonly layout(std430, binding = 4) buffer bodiesBuffer {

  Body bodies[];

};

coherent layout(std140, binding = 5) buffer treeBuffer {

  TreeCell tree[];

};

uniform uint treeSize;

// Assumes the bounds contain the body!
int getOffsetIndex(vec2 boundStart, vec2 boundRange, vec4 bodyPosition) {
                  
  // Determine if we should insert into Q1,Q2,Q3,Q4 (offsets of 1,2,3,4). Corresponds to cartesian quadrants.

  vec2 center = boundStart + (boundRange/2.0);

  if(bodyPosition.x >= center.x) { // X direction (Q1 || Q4)
    if(bodyPosition.y >= center.y) { // Q1
      return 1;
    }
    else{ // Q4
      return 4;
    }
  }
  else{  // (Q2 || Q3)
    if(bodyPosition.y >= center.y) { // Q2
      return 2;
    }
    else{ // Q3
      return 3;
    }
  }

}

vec2 boundStartFromOffset(vec2 prevBoundStart, vec2 boundRange, int offset) {

    vec2 center = prevBoundStart + (boundRange/2.0);
    
    if(offset == 1) {
        return center;
    }
    else if(offset == 2) {
        return vec2(prevBoundStart.x, center.y);
    }
    else if(offset == 3) {
        return prevBoundStart;
    }
    else{
        return vec2(center.x, prevBoundStart.y);
    }
}

void main() {

  uint gid = gl_GlobalInvocationID.x;
  
  // This will be the body this invocation will place in tree
  Body body = bodies[gid];
  TreeCell cellFromBody = TreeCell(body.position, body.velocity, body.mass, -1);
  TreeCell trackerCell = TreeCell(vec4(9000), vec4(9000), 9000, -1);
  
  bool successfullyInserted = false;
 
  // Used to track where we are while traversing the tree
  int treeIndex = 0;
  vec2 boundStart = vec2(-1e10, -1e10);
  vec2 boundRange = abs(boundStart * 2.0f);

  while(!successfullyInserted) {
    
    // Figure out where in the next level we have to insert
    int offsetIndex = getOffsetIndex(boundStart, boundRange, body.position);
    TreeCell cell = tree[treeIndex];
  
    // Traverse down tree
    if(cell.childIndex == -2) {
        treeIndex = treeIndex * 4 + offsetIndex;
        boundStart = boundStartFromOffset(boundStart, boundRange, offsetIndex);
        boundRange /= 2;
    }
    // Attempt to aquire a lock ot insert
    else if(gid == atomicCompSwap(tree[treeIndex].childIndex, -1, int(gid))) {
        // If new leaf node, just insert body
        if(cell.mass < 0 || cellFromBody.position == cell.position) {
            tree[treeIndex] = cellFromBody; // Also frees lock
        }
        // Insert the new and existing body into child indexes
        else {
            // Travel to the level where we insert the new bodies
            int subTreeIndex = treeIndex * 4;
            int offsetBody = getOffsetIndex(boundStart, boundRange, cellFromBody.position);
            int offsetExisting = getOffsetIndex(boundStart, boundRange, cell.position);
            boundStart = boundStartFromOffset(boundStart, boundRange, offsetIndex);
            boundRange /= 2;

            bool validIndex = (subTreeIndex + 4) < treeSize;
            
            // TODO: Add check we don't go out of bounds
            while(offsetBody == offsetExisting && validIndex == true) {
                tree[subTreeIndex + offsetBody].childIndex = -2;
                tree[subTreeIndex + offsetBody].mass = 0;
                subTreeIndex = (subTreeIndex + offsetBody) * 4;
                validIndex = (subTreeIndex + 4) < treeSize;

                // Update offsets for next iteration/insertion point
                offsetBody = getOffsetIndex(boundStart, boundRange, cellFromBody.position);
                offsetExisting = getOffsetIndex(boundStart, boundRange, cell.position);

                boundStart = boundStartFromOffset(boundStart, boundRange, offsetBody);
                boundRange /= 2;
                    
            }
                
            // Insert both cells
            tree[subTreeIndex + offsetBody] = cellFromBody;
            tree[subTreeIndex + offsetExisting] = cell;
            tree[subTreeIndex + offsetExisting].childIndex = -1;

            // Free lock
            tree[treeIndex].childIndex = -2;
        }

        memoryBarrier();
        successfullyInserted = true;
    }
  
    // Else try again (locked)
  
  }

}


