#version 430 core

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Body {
	vec4 position;
	vec4 velocity;
	float mass;
	uint align1;
	int align2;
	int align3;
};

readonly layout(std430, binding = 4) buffer bodiesBuffer {

  Body bodies[];

};

layout(std430, binding = 6) buffer bodiesOutputBuffer {

  Body bodiesOutput[];

};

uniform uint bodySize;
uniform float deltaT;
uniform float G;

void main() {

	const uint gid = gl_GlobalInvocationID.x;

	if(gid >= bodySize) {
		return;
	}

	const vec2 bodyPosition = bodies[gid].position.xy;
	const vec2 bodyVelocity = bodies[gid].velocity.xy;
	const float m1 = bodies[gid].mass;

	vec2 force = vec2(0.0);

	for(int i=0; i<bodySize; i++) {
		if(i != gid) {
			// F = G * M1 * M2 / r2
			const vec2 secondBodyPosition = bodies[i].position.xy;
			const vec2 r = secondBodyPosition - bodyPosition;
			const float r2 = dot(r, r);
			const float forceMag = ( G * m1 * bodies[i].mass ) / r2;
			force += forceMag * normalize(r);
		}
	}
	
	// Recalculate the velocity of the body from the force
	// vf=vi+a*t where a=F/bodies
	const vec2 acceleration = force / m1;
	const vec2 velocity = bodyVelocity + acceleration * deltaT;
	bodiesOutput[gid].velocity.xy = velocity;
	bodiesOutput[gid].position.xy = bodyPosition + velocity * deltaT;

}


