#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D inputTexture;
layout (rgba16f, binding = 3) uniform writeonly image2D outputTexture;

void main() {

  vec2 inputTexOffset = 1.0 / textureSize(inputTexture, 0); //Offset in input image!
  float x = inputTexOffset.x;
  float y = inputTexOffset.y;

  ivec2 pixelPosition = ivec2(gl_GlobalInvocationID.xy);
  ivec2 out_img_size = imageSize(outputTexture);
  vec2 texCoordOffset = 1.0 / out_img_size;
  vec2 texCoord = pixelPosition * texCoordOffset;

  // Downsample from input using sampler defined in Call of Duty's presentation at "ACM Siggraph 2014."

  // Take 13 samples around current texel:
  // a - b - c
  // - j - k -
  // d - e - f
  // - l - m -
  // g - h - i
  // === ('e' is the current texel) ===

  vec3 a = texture(inputTexture, vec2(texCoord.x - 2*x, texCoord.y + 2*y)).rgb;
  vec3 b = texture(inputTexture, vec2(texCoord.x,       texCoord.y + 2*y)).rgb;
  vec3 c = texture(inputTexture, vec2(texCoord.x + 2*x, texCoord.y + 2*y)).rgb;

  vec3 d = texture(inputTexture, vec2(texCoord.x - 2*x, texCoord.y)).rgb;
  vec3 e = texture(inputTexture, vec2(texCoord.x,       texCoord.y)).rgb;
  vec3 f = texture(inputTexture, vec2(texCoord.x + 2*x, texCoord.y)).rgb;

  vec3 g = texture(inputTexture, vec2(texCoord.x - 2*x, texCoord.y - 2*y)).rgb;
  vec3 h = texture(inputTexture, vec2(texCoord.x,       texCoord.y - 2*y)).rgb;
  vec3 i = texture(inputTexture, vec2(texCoord.x + 2*x, texCoord.y - 2*y)).rgb;

  vec3 j = texture(inputTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
  vec3 k = texture(inputTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;
  vec3 l = texture(inputTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
  vec3 m = texture(inputTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;

  // Apply weighted distribution:
  // 0.5 + 0.125 + 0.125 + 0.125 + 0.125 = 1
  // a,b,d,e * 0.125
  // b,c,e,f * 0.125
  // d,e,g,h * 0.125
  // e,f,h,i * 0.125
  // j,k,l,m * 0.5
  // This shows 5 square areas that are being sampled. But some of them overlap,
  // so to have an energy preserving downsample we need to make some adjustments.
  // The weights are the distributed, so that the sum of j,k,l,m (e.g.)
  // contribute 0.5 to the final color output. The code below is written
  // to effectively yield this sum. We get:
  // 0.125*5 + 0.03125*4 + 0.0625*4 = 1
  vec3 downsample = e*0.125;
  downsample += (a+c+g+i)*0.03125;
  downsample += (b+d+f+h)*0.0625;
  downsample += (j+k+l+m)*0.125;
  downsample = max(downsample, 0.0001f); // Avoid 0 multiplications causing artifacts

  // Write downsample to output
  vec3 test = vec3(0.0,1.0,0.0);
  imageStore(outputTexture, pixelPosition, vec4(downsample, 1.0)); // Store outside image bound will do nothing :D

}


