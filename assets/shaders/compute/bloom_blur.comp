#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(std140, binding = 1) buffer screenData {

  float luminance;
  uint width;
  uint height;
  uint percentRangeFromCenterForLuminanceCalc;
  uint blurPassCount;

};
layout (rgba16f, binding = 2) uniform image2D inputBlurBuffer;
layout (rgba16f, binding = 3) uniform image2D outputBlurBuffer;

bool isWithinBounds(ivec2 samplePixelPositionOffset, ivec2 img_size) {
  return samplePixelPositionOffset.x >= 0 && samplePixelPositionOffset.y >= 0 && 
         samplePixelPositionOffset.x < img_size.x && samplePixelPositionOffset.y < img_size.y;
}

void main() {


  uint mipMapLevel = 1 + (blurPassCount / 2);
  ivec2 in_img_size = imageSize(inputBlurBuffer);
  ivec2 out_img_size = imageSize(outputBlurBuffer);

  ivec2 pixelPosition = ivec2(gl_GlobalInvocationID.xy);

  // Downsample from input when blurring.
  // If mipMapLevel==1 then we don't need to downsample (done already in luminancePass)
  ivec2 samplePixelPosition = mipMapLevel != 1 ? 2 * pixelPosition : pixelPosition; 

  if(isWithinBounds(pixelPosition, out_img_size)) {

    // B in the blurBuffer
    int blurSize = 2;

    vec4 tempColor = vec4(0,0,0,0);
    uint numOfValidPixels = 0;

    for(int i=-blurSize; i<=blurSize; i++) {
      for(int j=-blurSize; j<=blurSize; j++) {
        ivec2 samplePixelPositionOffset = samplePixelPosition + ivec2(i, j);
        //if(isWithinBounds(samplePixelPositionOffset,in_img_size)) {
          tempColor += imageLoad(inputBlurBuffer, samplePixelPositionOffset);
          numOfValidPixels++;
        //}
      }
    }

    tempColor /= numOfValidPixels;

    imageStore(outputBlurBuffer, pixelPosition, tempColor);

  }


}


