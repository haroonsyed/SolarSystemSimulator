#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D inputTexture;
layout (rgba32f, binding = 3) uniform image2D outputTexture;

void main() {

  vec2 inputTexOffset = 1.0 / textureSize(inputTexture, 0); //Offset in input image!

  ivec2 pixelPosition = ivec2(gl_GlobalInvocationID.xy);
  ivec2 out_img_size = imageSize(outputTexture);
  vec2 texCoordOffset = 1.0 / out_img_size;
  vec2 texCoord = (vec2(pixelPosition) + (0.5,0.5)) * texCoordOffset;

  // The filter kernel is applied with a radius, specified in texture
  // coordinates, so that the radius will vary across mip resolutions.
  float filterRadius = 0.004;
  float x = filterRadius;
  float y = filterRadius;

  // Take 9 samples around current texel:
  // a - b - c
  // d - e - f
  // g - h - i
  // === ('e' is the current texel) ===
  vec3 a = texture(inputTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
  vec3 b = texture(inputTexture, vec2(texCoord.x,     texCoord.y + y)).rgb;
  vec3 c = texture(inputTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;

  vec3 d = texture(inputTexture, vec2(texCoord.x - x, texCoord.y)).rgb;
  vec3 e = texture(inputTexture, vec2(texCoord.x,     texCoord.y)).rgb;
  vec3 f = texture(inputTexture, vec2(texCoord.x + x, texCoord.y)).rgb;

  vec3 g = texture(inputTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
  vec3 h = texture(inputTexture, vec2(texCoord.x,     texCoord.y - y)).rgb;
  vec3 i = texture(inputTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;

  // Apply weighted distribution, by using a 3x3 tent filter:
  //  1   | 1 2 1 |
  // -- * | 2 4 2 |
  // 16   | 1 2 1 |
  vec3 upsample = e*4.0;
  upsample += (b+d+f+h)*2.0;
  upsample += (a+c+g+i);
  upsample *= 1.0 / 16.0;

  vec3 blended = imageLoad(outputTexture, pixelPosition).rgb + upsample;
  imageStore(outputTexture, pixelPosition, vec4(blended, 1.0)); // Store outside image bound will do nothing :D

}


